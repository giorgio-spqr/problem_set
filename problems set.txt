===================================================================================
GENERAL REQUIREMENTS
===================================================================================

This is a somewhat lengthy document, but the problems herein are not intended to be
particularly challenging, you're supposed to be able to come up with a good
solution for any of the problems below within an hour or so.

Note that examples provided for each problem are illustrative, not exhaustive.  The
fact that your solution works on example inputs does not guarantee its correctness.

All problems must be solved in PHP 7.0 or higher.

Your solution should consist of a single file called e.g. "solutions.php".  The
file should contain three top-level function definitions corresponding to the three
problems stated below.

All definitions must be in the root namespace.  You may use auxiliary definitions
of functions and classes in your solutions if you feel the need to do so.  Please
keep all auxiliary definitions in the same file.

Your solutions will be tested using error_reporting(E_ALL).  If your solutions emit
errors (of any level, including E_STRICT, E_NOTICE and E_DEPRECATED) during
testing, these will be counted as flaws in your solutions.

If you're unable or unwilling to solve one or more of the problems, please keep the
corresponding functions in your solution file, and make them return nonsensical
results or throw an exception (as in the solution template below).

Solution template file:

=== begin solutions.php ===========================================================
<?php

function maxProfit(array $pricesAndPurchases): int
{
    throw new \Exception('Not implemented.');
}

function stringCost(string $a, string $b,
    int $insertionCost, int $deletionCost, int $replacementCost): int
{
    throw new \Exception('Not implemented.');
}

function incrementalMedian(array $values): array
{
    throw new \Exception('Not implemented.');
}

=== end solutions.php =============================================================

Your solutions will be tested automatically.  Correctness will be checked by a
bunch of hand-crafted tests including various corner cases.  Both correctness and
efficiency will also be evaluated by separate property-based tests against
reference solutions with strict time limits.  This round of tests will include
large randomly-generated inputs.  Naive solutions are likely to pass the simple
correctness tests but not the efficiency tests.

Readability and style consistency will be taken into account when evaluating your
solutions.

===================================================================================
PROBLEM 1
===================================================================================

Implement a function with the following signature:

    function maxProfit(array $pricesAndPurchases): int

Here's a sample input:

    [
        0 => ['price' => 2, 'purchased' => 3],
        1 => ['price' => 3, 'purchased' => 0],
        2 => ['price' => 1, 'purchased' => 1],
        3 => ['price' => 5, 'purchased' => 4],
        4 => ['price' => 3, 'purchased' => 1],
        5 => ['price' => 2, 'purchased' => 2]
    ]

This data represents the purchases of a company trading in crude oil.  Array
elements represent consequent days in some time period, with index denoting the
number of the day, the 'price' field reflecting the price of oil on that date, and
the 'purchased' field reflecting the amount of crude oil purchased by the company
on that date (paying the specified price for each unit bought).

All prices and purchase amounts are guaranteed to be non-negative integers.
Indices are always going to be from 0 to count($pricesAndPurchase) - 1.  You may
rely on the fact that the data provided to your function will always be correct, so
you don't need to validate the input.

Assume for simplicity that the selling price is always exactly the same as the
buying price, that the prices do not fluctuate throughout the day, and that you can
always sell however much crude oil you wish.

Compute the maximum profit that could be made from selling purchased oil in the
given period, as if the seller had perfect information about future prices (as we
do).  You do not need to concern yourself with the issues of integer precision,
test inputs will be crafted in such a fashion so as not to trigger the integer
overflow for 64-bit integers.

For the input array above, we would sell 8 units of crude oil purchased from day 0
to day 3 on day 3, at a selling price of 5.  Having spent 27 units of currency on
purchasing the oil up to that date, we would get 8 * 5 === 40 units of currency
back, netting us a profit of 13.

We would also immediately sell back all oil purchased on days 4 and 5 at the same
price.  Since the price never grows beyond day 3, it is impossible to make any
profit on those purchases, and so our best option is selling back immediately.

Therefore, the maximum possible profit for this input is 13.

Another example:

    [
        0 => ['price' => 2, 'purchased' => 1],
        1 => ['price' => 8, 'purchased' => 1],
        2 => ['price' => 10, 'purchased' => 1],
        3 => ['price' => 4, 'purchased' => 1],
        4 => ['price' => 9, 'purchased' => 1]
    ]

In this case, we would sell everything we have on days 2 and 4.  On day 2, we would
sell 3 units of oil for 30, having spent 20 units of currency on buying those, for
a profit of 10.  On day 4, we would sell 2 units of oil for 18, having spent 13
units of currency on purchasing that oil on days 3 and 4.  The profit for this sale
being 5.  Therefore, the maximum profit in this case is 15.

To meet the effeciency standard, your solution should need no more than a second or
two to process an input array containing a million elements.

===================================================================================
PROBLEM 2
===================================================================================

Implement a function with the following signature:

    function stringCost(string $src, string $tgt,
        int $insertionCost, int $deletionCost, int $replacementCost): int

Given two strings $src and $tgt, and integer costs of various operations on strings
(inserting an arbitrary single character, removing an arbitrary single character
and replacing a single character with another single character), the function must
compute and return the minimum cost of transforming string $src into string $tgt
using these three operations.

You may assume that both strings will consist solely of Latin letters, and that all
costs are non-negative.  You do not need to validate the inputs.  Treat the strings
in a case-sensitive fashion.

For example, calling:

    stringCost('bitten', 'meeting', 1, 1, 1);

...should return 5.  One minimum cost transformation is as follows:

    bitten -> mitten -> metten -> meeten -> meetin -> meeting

There are five steps in this sequence, each with a cost of 1.

For comparison, calling:

    stringCost('bitten', 'meeting', 2, 3, 6);

...should return 22.  A couple more trivial examples:

    stringCost('', 'A', 1, 0, 0) === 1
    stringCost('a', 'A', 1, 1, 0) === 0
    stringCost('a', 'A', 1, 0, 2) === 1

Your solution should always be able to compute the actual minimum cost (an
approximation won't do), and should be sufficiently fast to need no more than a
second or two for processing a couple of 300-character strings as inputs.  Test
cases will include 300+ character inputs.

===================================================================================
PROBLEM 3
===================================================================================

Implement a function with the following signature:

    function incrementalMedian(array $values): array

The input array is guaranteed to be non-empty and to contain only integer numbers.
You do not need to validate the input and may assume it will always be correct.
The function must return the array with the same number of elements as the input,
where each element corresponds to the median of a non-empty prefix of the input
array.  Thus, the first element of the result must be the median of:

    array_slice($values, 0, 1)
    
...the second element must be the median of:

    array_slice($values, 0, 2)

...and so on, until the last element, which must be the median of the entire input
array.

The median is the middlemost element of the array when sorted.  For simplicity,
when an array contains an even number of elements, we'll consider the smaller of
the two candidates as the median.  Therefore, the median of [1, 8, 4, 7, 13] is 7,
and the median of [1, 8, 4, 7] would be 4.  You may refer to Wikipedia for a more
detailed and technical definition:

    https://en.wikipedia.org/wiki/Median

To put it all together, when calling incrementalMedian([1, 8, 4, 7, 13]), the
result should be [1, 1, 4, 4, 7].

Note that explicitly extracting every prefix from the input array, sorting it then
trying to find the middlemost element will be way, way too slow to achieve the
satisfactory efficiency.  The benchmark here is being able to process an array
containing a hundred thousand elements in a second or two.

Good luck and have fun!